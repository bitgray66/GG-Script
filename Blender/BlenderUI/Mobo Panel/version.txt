#### v04
parto da zero aggiungo solo tasto per pulire scena completamente e tasto per rinominare mesh col stesso nome del obj.

#### ver 5.0
con file __init__ in uno zip per creare la struttura di un addon corretta
lo zip avrà come nome MoboCustomPanel 5.0.zip, contiene la cartella MoboCustomPanel che contiene __init__.py e MoboCustomPanel.py






##### TUTORIAL
https://www.youtube.com/watch?v=xqd1H0xVmTI

class CAT_PT_clear_all(bpy.types.Operator):
    """"Setting the render output path"""

    bl_label = "label2" # found at the top of the Panel
    bl_idname = "boo.reset2" # found at the top of the Panel

    def execute(self, context):
        for obj in bpy.context.selected_objects:
            for obj in bpy.data.objects:
                bpy.data.objects.remove(obj)

            for mesh in bpy.data.meshes:
                bpy.data.meshes.remove(mesh)

            for coll in bpy.data.collections:
                bpy.data.collections.remove(coll)

            for mat in bpy.data.materials:
                bpy.data.materials.remove(mat)
        return {"FINISHED"}



import bpy

# Ottieni il nome dell'oggetto selezionato
selected_object = bpy.context.active_object
selected_name = selected_object.name

# Itera attraverso tutti gli oggetti nella scena
for obj in bpy.context.scene.objects:
    # Controlla se l'oggetto è una mesh o una curva
    if obj.type in ['MESH', 'CURVE']:
        # Assegna il nome dell'oggetto selezionato all'oggetto corrente
        obj.name = selected_name

        
import bpy

# Funzione ricorsiva per ottenere tutti gli oggetti nelle collezioni figlie
def get_all_objects(collection):
    all_objects = []
    for obj in collection.objects:
        all_objects.append(obj)
    for child_collection in collection.children:
        all_objects.extend(get_all_objects(child_collection))
    return all_objects

# Ottieni la collezione selezionata
selected_collection = bpy.context.collection

# Ottieni tutti gli oggetti nelle collezioni figlie
all_objects = get_all_objects(selected_collection)

# Stampare i nomi e il tipo di tutti gli oggetti in scena
objects=bpy.data.objects
print('###################')
for obj in all_objects:
    print(obj.name, oby.type)
    if obj.type == 'MESH':
        obj.data.name = obj.name
    if obj.type == 'CURVES':
        obj.data.name = obj.name


>>>>>>> al posto dell IF 
term = obj.type
match term:
    case 'CURVE':
         obj.data.name = obj.name
    case pattern-2:
         action-2
    case pattern-3:
         action-3
    case _:
        action-default
        
>>>>>> oppure
import bpy
    
MoboType = ['CURVE', 'MESH', 'CAMERA', 'CURVE', 'LIGHT', 'GPENCIL', 'META', 'VOLUME', 'FONT', 'SPEAKER', 'LATTICE', 'ARMATURE', 'LIGHT_PROBE']

for obj in bpy.context.selected_objects:
    if obj.type in MoboType:
        obj.data.name = obj.name